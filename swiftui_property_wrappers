## @State
- SwiftUI 에서 상태를 처리하는 방법 
- 뷰의 상태를 저장하는 프로퍼티로 상태 관리 주체는 해당 뷰 
- 기본적으로 Private 선언이기에 다른 뷰와 값을 소통하려면 Binding 을 이용 
- 값이 변경될 때마다 UI 업데이트 

```
import SwiftUI

struct CounterView: View {
    @State private var count = 0
    
    var body: some View {
        VStack {
            Text("Count: \(count)")
            
            Button("Increment") {
                count += 1
            }
            
            Button("Decrement") {
                count -= 1
            }
        }
    }
}

@State private var count = 0로 카운트 상태를 선언합니다.
Text 뷰에서 현재 카운트 값을 표시합니다.
"Increment" 버튼을 누르면 카운트가 증가하고, "Decrement" 버튼을 누르면 감소합니다.
카운트 값이 변경될 때마다 SwiftUI가 자동으로 뷰를 업데이트합니다.

@State는 간단한 데이터 타입(Int, String, Bool 등)에 주로 사용되며, 
복잡한 데이터 모델이나 여러 뷰에서 공유해야 하는 데이터의 경우 다른 상태 관리 방식(@ObservedObject, @EnvironmentObject 등)을 고려해야 합니다.
```
